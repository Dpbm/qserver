name: (Reusable Workflow) Publish to GHCR
on:
    workflow_call:
        inputs:
            image_name:
                type: string
                description: 'The name of your image to be built'
                required: true
            context:
                type: string
                description: 'The directory of your Dockerfile'
                required: true

            file:
                type: string
                description: 'The path to your Dockerfile'
                required: true

        secrets:
          GH_TOKEN:
            description: 'Your github access token'
            required: true

env:
    REGISTRY: ghcr.io
    GH_USERNAME: Dpbm

jobs:
  build-and-push-image:
    name: Push Docker image (${{ inputs.image_name }})

    runs-on: ubuntu-24.04

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
    
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.GH_USERNAME }}/${{ inputs.image_name }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.file }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ inputs.image_name }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
      